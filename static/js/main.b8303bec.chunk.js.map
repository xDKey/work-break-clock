{"version":3,"sources":["assets/Electrolize.ttf","assets/AveriaSerifLibre-Bold.ttf","components/Button.js","assets/beep.mp3","components/Timer.js","assets/main-background.jpg","components/Control.js","components/App.js","index.js"],"names":["StyledButton","styled","button","Button","id","children","onClick","StyledTimer","section","TimerLabel","p","Time","Controls","div","Timer","timerLabel","time","clearAll","setIsBreak","isBreak","useState","split","timeLeft","setTimeLeft","isRun","setIsRun","audio","useRef","useEffect","intervalId","setInterval","computateTime","clearInterval","min","sec","current","play","computedMin","computedSec","newMin","String","length","newSec","join","pause","currentTime","src","beep","ref","Control","controlType","handleSetTime","handleClick","type","Title","BackgroundTimer","main","backgroundImage","TimerWrapper","ControlWrapper","App","breakTime","setBreakTime","workTime","setWorkTime","setCurrentTime","GlobalStyle","createGlobalStyle","Electrolize","AveriaBold","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b8303bec.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Electrolize.3eb1b458.ttf\";","export default __webpack_public_path__ + \"static/media/AveriaSerifLibre-Bold.fc1ba5ea.ttf\";","import styled from 'styled-components'\r\n\r\nconst StyledButton = styled.button`\r\n  padding: 10px;\r\n  background: grey;\r\n  cursor: pointer;\r\n  outline: none;\r\n  border: none;\r\n  border-radius: 100%;\r\n  box-shadow: 1px 1px 2px black;\r\n`\r\n\r\nconst Button = ({ id, children, onClick }) => {\r\n  return (\r\n    <StyledButton id={id} onClick={onClick}>\r\n      {children}\r\n    </StyledButton>\r\n  )\r\n}\r\n\r\nexport default Button\r\n","export default __webpack_public_path__ + \"static/media/beep.77fbd8f5.mp3\";","import styled from 'styled-components'\r\nimport { FaPlay, FaUndoAlt, FaPause } from 'react-icons/fa'\r\nimport Button from './Button'\r\nimport { useEffect, useRef, useState } from 'react'\r\nimport beep from '../assets/beep.mp3'\r\n\r\nconst StyledTimer = styled.section`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`\r\n\r\nconst TimerLabel = styled.p`\r\n  margin-top: 10px;\r\n  margin-bottom: 0;\r\n  font-family: Electrolize;\r\n  font-size: 1.5rem;\r\n  text-transform: uppercase;\r\n`\r\n\r\nconst Time = styled.p`\r\n  font-family: Electrolize;\r\n  font-size: 5rem;\r\n  margin-top: 0;\r\n  margin-bottom: 10px;\r\n  line-height: 5rem;\r\n`\r\n\r\nconst Controls = styled.div`\r\n  width: 30%;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-top: 5px;\r\n`\r\n\r\nconst Timer = ({ timerLabel, time, clearAll, setIsBreak, isBreak }) => {\r\n  const [timeLeft, setTimeLeft] = useState(time.split(':'))\r\n  const [isRun, setIsRun] = useState(false)\r\n  const audio = useRef(null)\r\n\r\n  useEffect(() => {\r\n    let intervalId\r\n\r\n    if (isRun) {\r\n      intervalId = setInterval(computateTime, 1000)\r\n    }\r\n\r\n    return () => clearInterval(intervalId)\r\n  })\r\n\r\n  useEffect(() => {\r\n    setTimeLeft(time.split(':'))\r\n  }, [time, isBreak])\r\n\r\n  const computateTime = () => {\r\n    const [min, sec] = timeLeft\r\n    if (+min === 0 && +sec === 0) {\r\n      audio.current.play()\r\n      return setIsBreak(!isBreak)\r\n    }\r\n\r\n    const computedMin = +sec === 0 ? min - 1 : min\r\n    const computedSec = +sec > 0 ? sec - 1 : 59\r\n\r\n    const newMin =\r\n      String(computedMin).length === 1 ? '0' + computedMin : computedMin\r\n    const newSec =\r\n      String(computedSec).length === 1 ? '0' + computedSec : computedSec\r\n\r\n    setTimeLeft([newMin, newSec])\r\n  }\r\n\r\n  const reset = () => {\r\n    audio.current.pause()\r\n    audio.current.currentTime = 0\r\n    clearAll()\r\n    setIsRun(false)\r\n    setTimeLeft(time.split(':'))\r\n  }\r\n\r\n  return (\r\n    <StyledTimer>\r\n      <TimerLabel id='timer-label'>{timerLabel}</TimerLabel>\r\n      <Time id='time-left'>{timeLeft.join(':')}</Time>\r\n      <Controls>\r\n        <Button id='start_stop' onClick={() => setIsRun(!isRun)}>\r\n          {isRun ? <FaPause /> : <FaPlay />}\r\n        </Button>\r\n        <Button id='reset' onClick={reset}>\r\n          <FaUndoAlt />\r\n        </Button>\r\n      </Controls>\r\n      <audio id='beep' src={beep} ref={audio} />\r\n    </StyledTimer>\r\n  )\r\n}\r\n\r\nexport default Timer\r\n","export default __webpack_public_path__ + \"static/media/main-background.0b36cbc7.jpg\";","import styled from 'styled-components'\r\nimport { FaArrowUp, FaArrowDown } from 'react-icons/fa'\r\nimport Button from './Button'\r\n\r\nconst StyledTimer = styled.section`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  width: 120px;\r\n`\r\n\r\nconst TimerLabel = styled.p`\r\n  font-family: Averia;\r\n  font-size: 1.5rem;\r\n  margin-top: 0;\r\n  margin-bottom: 0;\r\n`\r\n\r\nconst Time = styled.p`\r\n  width: 100px;\r\n  height: 55px;\r\n  margin-top: 9px;\r\n  margin-bottom: 0px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 3rem;\r\n  font-family: Electrolize;\r\n`\r\n\r\nconst Controls = styled.div`\r\n  margin-top: 4px;\r\n  width: 100px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n`\r\n\r\nconst Control = ({ controlType, time, handleSetTime }) => {\r\n  const handleClick = ({ type }) => {\r\n    if (type === 'INC') {\r\n      if (time === 60) return\r\n      handleSetTime(time + 1)\r\n    }\r\n    if (type === 'DEC') {\r\n      if (time === 1) return\r\n      handleSetTime(time - 1)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <StyledTimer>\r\n      <TimerLabel id={controlType + '-label'}>\r\n        {controlType === 'break' ? 'Break' : 'Work'}\r\n      </TimerLabel>\r\n      <Time id={controlType + '-length'}>{time}</Time>\r\n      <Controls>\r\n        <Button\r\n          id={controlType + '-increment'}\r\n          onClick={() => handleClick({ type: 'INC' })}\r\n        >\r\n          <FaArrowUp />\r\n        </Button>\r\n        <Button\r\n          id={controlType + '-decrement'}\r\n          onClick={() => handleClick({ type: 'DEC' })}\r\n        >\r\n          <FaArrowDown />\r\n        </Button>\r\n      </Controls>\r\n    </StyledTimer>\r\n  )\r\n}\r\n\r\nexport default Control\r\n","import styled from 'styled-components'\r\nimport Timer from './Timer'\r\nimport backgroundImage from '../assets/main-background.jpg'\r\nimport Control from './Control'\r\nimport { useEffect, useState } from 'react'\r\n\r\nconst Title = styled.div`\r\n  font-family: Averia;\r\n  font-size: 2rem;\r\n  margin-top: 10px;\r\n`\r\n\r\nconst BackgroundTimer = styled.main`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  position: relative;\r\n  background-image: url(${backgroundImage});\r\n  width: 386px;\r\n  height: 420px;\r\n  margin: auto;\r\n  background-position: center;\r\n  background-size: 540px;\r\n  background-repeat: no-repeat;\r\n  border-radius: 7%;\r\n  box-shadow: 5px 5px 15px black;\r\n`\r\n\r\nconst TimerWrapper = styled.div`\r\n  height: 160px;\r\n  width: 280px;\r\n  margin-top: 10px;\r\n  z-index: 1;\r\n`\r\n\r\nconst ControlWrapper = styled.div`\r\n  width: 300px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  position: relative;\r\n  top: -30px;\r\n`\r\n\r\nconst App = () => {\r\n  const [breakTime, setBreakTime] = useState(5)\r\n  const [workTime, setWorkTime] = useState(25)\r\n  const [isBreak, setIsBreak] = useState(false)\r\n  const [currentTime, setCurrentTime] = useState(`${workTime}:00`)\r\n\r\n  const clearAll = () => {\r\n    setIsBreak(false)\r\n    setBreakTime(5)\r\n    setWorkTime(25)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (isBreak) setCurrentTime(breakTime + ':00')\r\n    if (!isBreak) setCurrentTime(workTime + ':00')\r\n  }, [isBreak, workTime])\r\n\r\n  return (\r\n    <BackgroundTimer>\r\n      <Title>Work + break Clock</Title>\r\n      <TimerWrapper>\r\n        <Timer\r\n          timerLabel={isBreak ? 'break' : 'work'}\r\n          time={currentTime}\r\n          clearAll={clearAll}\r\n          setIsBreak={setIsBreak}\r\n          isBreak={isBreak}\r\n        />\r\n      </TimerWrapper>\r\n      <ControlWrapper>\r\n        <Control\r\n          controlType='break'\r\n          time={breakTime}\r\n          handleSetTime={setBreakTime}\r\n        />\r\n        <Control\r\n          controlType='session'\r\n          time={workTime}\r\n          handleSetTime={setWorkTime}\r\n        />\r\n      </ControlWrapper>\r\n    </BackgroundTimer>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { createGlobalStyle } from 'styled-components'\r\nimport Electrolize from './assets/Electrolize.ttf'\r\nimport AveriaBold from './assets/AveriaSerifLibre-Bold.ttf'\r\nimport App from './components/App'\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n@font-face {\r\n  font-family: 'Electrolize';\r\n  src: url(${Electrolize});\r\n};\r\n@font-face {\r\n  font-family: 'Averia';\r\n  src: url(${AveriaBold});\r\n}\r\n`\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <GlobalStyle />\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}